<!-- Templates -->
<script type="text/html" id="slide">
	<div id="${id}">
    <h1>${title}</h1>
    <div class="content" data-bind="html: html"></div>
	</div>
</script>

<script type="text/html" id="slide-chooser">
	<li>
    <button data-bind="click: function() { slidesModel.go(this) }">${id}</button>
	</li>
</script>

<div id="container">
  <div data-bind="template: { name: 'slide', foreach: slidesModel.currentSlide }" class="slides-container" id="body"></div>

  <div class="slides-chooser" id="footer">
    <button data-bind="click: slidesModel.goPreviousSlide, disable: slidesModel.isFirstSlide" class="last">Anterior</button>
    <ul data-bind="template: { name: 'slide-chooser', foreach: slidesModel.slides}"></ul>
    <button data-bind="click: slidesModel.goNextSlide, disable: slidesModel.isLastSlide" class="first">Siguiente</button>
  </div>
</div>



<script type="text/javascript">

  var Slide = function(id, title, html){
    this.id = id;
    this.title = title;
    this.html = html;
  };

  var slidesModel = {
    currentSlide: ko.observable(),
    slides: ko.observableArray(),
    currentExample: ko.observable(),

    goNextSlide:function(){
      var slides = this.slides();
      var slide = null;
      for(var i=0; i<slides.length;i++ ){
        slide = slides[i];
        if(this.currentSlide().id === slide.id && slides[i+1]){
          this.currentSlide(slides[i+1]);
          break;
        }
      }
    },

    goPreviousSlide:function(){
      var slides = this.slides();
      var slide = null;
      for(var i=slides.length-1; i>=0;i-- ){
        slide = slides[i];
        if(this.currentSlide().id === slide.id && slides[i-1]){
          this.currentSlide(slides[i-1]);
          break;
        }
      }
    },

    go:function(slide){
      this.currentSlide(slide);
    },

    //Simple hack to know when the DOM node is ready
    //Knockout only fires an event when the observable changes (before DOM gets refreshed),
    //and it doesn't provide any event when the DOM changes.

    //I need to attach new bindings to existing nodes, thus I need to bindWhenReady
    intervalId: null,
    node: null,
    model: null,
    namespace: null,

    bindWhenReady: function(node, model, namespace){
      this.node = node;
      this.model = model;
      this.namespace = namespace;
      this.intervalId = setInterval("slidesModel.checkNode()",100);
    },

    checkNode:function(){
      if ($("#" + this.node).size() > 0){ //Check if the node is present, if not do nothing, setInterval will call us again
        clearInterval(this.intervalId); //stop looping

        ko.applyBindings(this.model, this.namespace);

        //Clear the values for next slide
        this.intervalId = null;
        this.node = null;
        this.model = null;
        this.namespace = null;
      }
    }
  };

  $.get("/slides", function(data){
    $(data).each(function(index, item){
      slidesModel.slides.push(new Slide(item.id, item.title, item.html));
    });
    slidesModel.currentSlide(data[0]); //Load first slide
  });

  slidesModel.isLastSlide = ko.dependentObservable(function(){
    var slides = slidesModel.slides();
    if(slidesModel.currentSlide() === undefined) return false;
    return slidesModel.currentSlide().id == slides[slides.length-1].id;
  });

  slidesModel.isFirstSlide = ko.dependentObservable(function(){
    var slides = slidesModel.slides();
    if(slidesModel.currentSlide() === undefined) return true;
    return slidesModel.currentSlide().id == slides[0].id;
  });

  $(document).bind('new-content-loaded',function(){
    console.log('new-content-loaded');
  });

	ko.applyBindings(slidesModel);

  $(document).keypress(function(event){
    var code = (event.keyCode ? event.keyCode : event.which);
    if(code == 39) { //Right Arrow
      slidesModel.goNextSlide();
    }else if(code == 37) { //Left Arrow
      slidesModel.goPreviousSlide();
    }
  });




</script>


